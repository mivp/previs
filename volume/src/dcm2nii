#!/bin/sh
# filename: dcm2nii
# description: convert DICOM to NIFTI using LONI Debabeler
# Toan Nguyen, Jan 2016
# The script is based on debabeler-cli.sh of Wilson

# ========= MAIN SCRIPT ============
# Note: you can configure it to point to the java binary e.g. /usr/bin/java.
JAVA=$(which java)

if [[ -z $JAVA ]]; then
    echo "No java found!" 1>&2
    exit 1
fi

# Java heap size set to 4GB. Change it bigger if you have large data sets and 
# make sure it does not exceed your computer's physical RAM.
XMX="4096m"
JAVA="${JAVA} -Xmx${XMX}"

# Note: you need to set it to point to the loni-debabeler.jar file.
DEBABELER_JAR=loni-debabeler.jar

if [[ ! -f $DEBABELER_JAR ]]; then
    echo "loni-debabeler.jar not found!" 1>&2
    exit 1
fi

##############################################################################
##                                                                          ##
##                               Mappings                                   ##
##                                                                          ##
##############################################################################
MAPPINGS="DicomToAnalyzeRL DicomToAnalyzeNL DicomToNifti"
DicomToAnalyzeRL=DicomToAnalyze_RL_Wilson_05Jan2007.xml
DicomToAnalyzeRL_Target=analyze
DicomToAnalyzeNL=DicomToAnalyze_NL_Wilson_05Jan2007.xml
DicomToAnalyzeNL_Target=analyze
DicomToNifti=DicomToNifti_Wilson_14Aug2012.xml
DicomToNifti_Target=nifti


##############################################################################
##                                                                          ##
##                         function: usage                                  ##
##                                                                          ##
##############################################################################
usage(){
	echo ""
	echo "Usage:"
	echo "        $(basename $0) --input <path/to/dicom_directory> --mapping <MAPPING> [--suppress]"
	echo ""
	echo "Description:"
	echo "        --input, -i"
	echo "          Input DICOM directories"
	echo ""
	echo "        --mapping,-m"
	echo "          DicomToAnalyzeRL"
	echo "          DicomToAnalyzeNL"
	echo "          DicomToNifti"
	echo ""
	echo "        --suppress,-s"
	echo "          Use to suppress verbose messages"
	echo ""
}

##############################################################################
##                                                                          ##
##                 function: contains <string> <substring>                  ##
##                                                                          ##
##############################################################################
contains(){
	until [ -z "$2" ]
	do
		args="$args $1"
		shift
	done
	for arg in $args
	do
		if [ "$1" == "$arg" ]; then
			CONTAINS=true
			break
		fi
	done
	if [ -n "$CONTAINS" ]; then
		echo "$CONTAINS"
	fi
}

##############################################################################
##                                                                          ##
##                               Main                                       ##
##                                                                          ##
##############################################################################

until [ -z "$1" ]
do
	case "$1" in
		"--target" | "-t" )
		if [ "`contains $TARGETS $2`" == "true" ];then
			TARGET=$2
		else
			echo "Error: $2 is not a valid target."
			echo "Available targets: $TARGETS"
			exit
		fi
		shift
		shift
		;;
		"--mapping" | "-m" )
		if [ "`contains $MAPPINGS $2`" == "true" ];then
			MAPPING=$2
		else
			echo "Error: $2 is not a valid mapping."
			echo "Available mappings: $MAPPINGS"
			exit
		fi
		shift
		shift
		;;
		"--suppress" | "-s" )
		SUPPRESS=Y
		shift
		;;
		"--input" | "-i" )
		shift
		until [ -z "$1" ] || [ "${1:0:1}" == "-" ]
		do
			INPUTS="$INPUTS $1"
			shift
		done
		;;
		* )
		shift
		;;
	esac
done

echo $INPUTS

if [ -z "$INPUTS" ]; then
	echo "Error: no valid input found."
	usage
	exit
fi

if [ -z "$MAPPING" ]; then
	echo "Error: no valid mapping found."
	usage
	exit
fi

if [ -n "$SUPPRESS" ]; then
	SUPPRESS="-suppress"
fi

eval MAPPING_FILE=\$$MAPPING
eval MAPPING_TARGET=${MAPPING}_Target
eval MAPPING_TARGET=\$$MAPPING_TARGET

#unzip file file
unzip $INPUTS.zip -d $INPUTS
		
$JAVA -jar $DEBABELER_JAR -mapping $MAPPING_FILE -target $MAPPING_TARGET $SUPPRESS -recursive -input $INPUTS

# remove dcm files
find ${INPUTS} -name *.dcm -type f -delete

exit 0